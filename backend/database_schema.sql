-- Create table for Cost Centers
CREATE TABLE cost_centers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, name)
);

-- Create table for Mapping Templates
CREATE TABLE mapping_templates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  name TEXT NOT NULL,
  file_type TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create table for Transactions
CREATE TABLE transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  transaction_date DATE NOT NULL,
  merchant TEXT NOT NULL,
  amount NUMERIC(12, 2) NOT NULL,
  cost_center_id BIGINT REFERENCES cost_centers(id),
  account TEXT,
  status TEXT NOT NULL DEFAULT 'Review Required',
  -- For preventing duplicates
  transaction_hash TEXT NOT NULL UNIQUE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security (RLS) for all tables
ALTER TABLE cost_centers ENABLE ROW LEVEL SECURITY;
ALTER TABLE mapping_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

-- Create policies to ensure users can only access their own data
CREATE POLICY "Users can manage their own cost centers" ON cost_centers FOR ALL
USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own mapping templates" ON mapping_templates FOR ALL
USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own transactions" ON transactions FOR ALL
USING (auth.uid() = user_id);

